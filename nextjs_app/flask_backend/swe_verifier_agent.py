import re
import json
import os
from agent import Agent
from langchain_core.messages import HumanMessage

class SWEVerifierAgent(Agent):
    def __init__(self, model, tools):
        prompt = """You are a code verification agent tasked with reviewing and fixing React/Next.js code generated by another AI. 
        Specifically check for and fix the following issues:
        
        1. Incorrect JSX syntax (missing closing tags, improper nesting, etc.)
        2. Remove any code markdown ticks (```) that shouldn't be in the final code
        3. Ensure there's a back button to the SWE model at the end of the component, implemented like this:

           <div className="flex justify-center mt-8 mb-8">
             <button 
                 className="btn btn-secondary" 
                 onClick={() => router.push("/swe")}
             >
                 Back to SWE Agent
             </button>
           </div>

        4. Get rid of any placeholders (e.g. placeholder img tags). 
        5. Ensure proper imports for React components and hooks (especially useRouter)
        
        Analyze the code thoroughly and return ONLY the fixed code without any explanation, JSON formatting, or markdown. 
        The output should be ready to use directly as a Next.js component. Do NOT get rid of any existing directives, such
        as use client. 
        """
        super().__init__(model, tools, prompt)
    
    def run(self, inputCode):
        cleanedCode = self.initialCleanup(inputCode)
        result = super().run(cleanedCode)
        fixedCode = result['messages'][-1].content
        fixedCode = self.finalCleanup(fixedCode)
        self.last_message = fixedCode
        return fixedCode
    
    def initialCleanup(self, code):
        # Remove markdown code blocks
        code = re.sub(r'```(?:jsx|javascript|js|react|typescript|ts)?\n', '', code)
        code = re.sub(r'```', '', code)
        code = re.sub(r'`', '', code)
        return code.strip()
    
    def finalCleanup(self, code):
        # Remove any remaining markdown code blocks
        code = re.sub(r'```(?:jsx|javascript|js|react|typescript|ts)?\n', '', code)
        code = re.sub(r'```', '', code)
        code = re.sub(r'`', '', code)
        
        # Preserve "use client" directive if it exists
        useClientDirective = ""
        useClientMatch = re.search(r'^\s*[\'"]use client[\'"]', code)
        if useClientMatch:
            useClientDirective = code[:useClientMatch.end()] + "\n\n"
            code = code[useClientMatch.end():].strip()
        
        # Remove any explanatory text before the actual code
        importMatch = re.search(r'import\s+React|import\s+\{.*\}\s+from\s+[\'"]react[\'"]|import\s+.*\s+from\s+[\'"]next', code)
        if importMatch:
            code = code[importMatch.start():]
        
        # Restore the "use client" directive
        code = useClientDirective + code
        
        # Always add the back button component definition before the export default
        exportIndex = code.rfind("export default")
        if exportIndex > 0:
            back_button = """
    // Add back button to SWE Agent
    const BackButton = () => {
    const router = useRouter();
    return (
        <div className="flex justify-center mt-8 mb-8">
        <button 
            className="btn btn-secondary" 
            onClick={() => router.push("/swe")}
        >
            Back to SWE Agent
        </button>
        </div>
    );
    };
    """
            code = code[:exportIndex] + back_button + code[exportIndex:]
        
        # Always add the BackButton component at the end of the returned JSX
        # Find the last closing div or fragment before the end of the component
        for i in range(len(code) - 1, 0, -1):
            if code[i : i + 6] == "</div>" or code[i : i + 2] == "/>":
                # Insert the BackButton component before this closing tag
                code = code[:i] + "<BackButton />\n" + code[i:]
                break
        
            
        return code.strip()