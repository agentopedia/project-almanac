# -*- coding: utf-8 -*-
"""Almanac-creation-from-scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G7xw-uyAg0Ls6SodgGGi_FaX5kvykFnN?resourcekey=0-ggYKMsVlCx6Fuxs1XmCE4g
"""

# pip install -qU langchain-openai langchain langchain_community openai

import os
import random

from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_core.prompts import ChatPromptTemplate

from collections import defaultdict
from openai import OpenAI

os.environ["OPENAI_API_KEY"] = "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"
os.environ['TAVILY_API_KEY'] = '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'
client = OpenAI()

llm = ChatOpenAI(model="gpt-3.5-turbo-0125")
tools = [TavilySearchResults(max_results=1)]

def model_response(text):
    completion = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {
            "role": "user",
            "content": f"{text}"
        }
    ]
)
    return completion.choices[0].message.content

def agent_response(text_input):
    parts = text_input.split("As a ")
    if len(parts) < 2:
        raise ValueError("Input text does not contain an agent type.")
    agentType = parts[1].split(",")[0].strip()
    print(agentType)
    prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            f"You are an expert specializing in {agentType}. Make sure to use the tavily_search_results_json tool for information.",
        ),
        ("placeholder", "{chat_history}"),
        ("human", "{input}"),
        ("placeholder", "{agent_scratchpad}"),
    ]
    )
    agent = create_tool_calling_agent(llm, tools, prompt)
    agentExecutor = AgentExecutor(agent = agent, tools = tools, verbose = True)
    output = agentExecutor.invoke({"input": text_input})
    return output

class PlannerAgent:
    def __init__(self):
        self.sub_tasks = []

    def break_down_problem(self, problem):
        task_list = model_response(f''' 
        
        You are an expert planner. Your task is to break down the following problem into three detailed sub-tasks:
        Problem: {problem}
        
        Example of a breakdown:
        
        Problem: Analyze the effects of climate change.
        Sub-tasks: 
          1. Research current climate trends and statistics.
          2. Analyze the impact of climate change on agriculture.
          3. Develop a report summarizing the findings and proposing solutions.

        Please ensure:
         1. Each sub-task is specific, actionable, and leads towards solving the overall problem.
         2. Include any necessary assumptions and context relevant to each sub-task.
         3. Format the output as a list of sub-tasks, separated by semicolons.
            Here is the expected format: [sub-task 1; sub-task 2; sub-task 3]
        ''')
        
        # Validating output format
        if task_list.startswith('[') and task_list.endswith(']'):
            self.sub_tasks = task_list[1:-1].split(';')
            self.sub_tasks = [sub_task.strip() for sub_task in self.sub_tasks] 
        else:
            raise ValueError("The output format is incorrect. Expected format: [sub-task 1; sub-task 2; sub-task 3]")

def choose_agent(task):
    # Logic for choosing the best agent based on the task
    # For now, just returning a random agent from a list of available agents
    agents = ['Researcher', 'Expert', 'Product Manager', 'Mathematician', 'Marketer', 'Teacher']
    return random.choice(agents)

class TaskAgent:
    def __init__(self, name):
        self.name = name

    def execute_task(self, task):
        prompt = f"As a {self.name}, this is your provided task: {task}. Make sure to provide a detailed and thoughtful response."
        return agent_response(prompt)

class CritiqueAgent:
    def __init__(self):
        self.feedback = []

    def provide_feedback(self, outputs, problem, plan):
        # Provide feedback based on outputs (simulated)
        feedback = model_response(f'Analyze the {outputs} and check if they are in-line with the plan:{plan} and offer a solution to the problem {problem} ')
        self.feedback.append(f"{feedback}")  # Short feedback

class AgentSystem:
    def __init__(self):
        self.planner = PlannerAgent()
        self.critique = CritiqueAgent()
        self.memory = defaultdict(list)
        self.outputs = {}

    def run(self, problem):
        # Problem Breakdown
        self.planner.break_down_problem(problem)

        # Task Execution
        for sub_task in self.planner.sub_tasks:
            print ("Sub task", sub_task)
            agent_name = choose_agent(sub_task)
            agent = TaskAgent(agent_name)
            output = agent.execute_task(sub_task)
            self.memory[agent_name].append(output)
            self.outputs[agent_name] = output

        # Feedback Loop
        self.critique.provide_feedback(self.outputs,problem,self.planner.sub_tasks)

        # Improvement Loop (simulated by re-running the tasks)
        for agent_name, output in self.outputs.items():
            # Simulate rework based on feedback (for simplicity, just re-run the task)
            print(f"Reworking task for {agent_name}...")
            new_output = model_response(f"Reworked {output}")
            self.outputs[agent_name] = new_output

        # Final Compilation
        final_output = "\n".join([f"{agent_name}: {output}" for agent_name, output in self.outputs.items()])
        return final_output

# Example usage
if __name__ == "__main__":
    problem = "Analyze the impact of AI on education"
    system = AgentSystem()
    final_result = system.run(problem)
    print("Final Result:")
    print(final_result)

    # # Testing Output Validation

    # task_list = "[Research current climate trends and statistics.; Analyze the impact of climate change on agriculture.; Develop a report summarizing the findings and proposing solutions.]"
    # if task_list.startswith('[') and task_list.endswith(']'):
    #     sub_tasks = task_list[1:-1].split(';')
    #     sub_tasks = [sub_task.strip() for sub_task in sub_tasks] 
    #     print(sub_tasks)
    # else:
    #     raise ValueError("The output format is incorrect. Expected format: [sub-task 1; sub-task 2; sub-task 3]")
    
    # # Testing AgentType Extraction

    # sub_task = "Say Hi"
    # agent_name = choose_agent(sub_task)
    # agent = TaskAgent(agent_name)
    # output = agent.execute_task(sub_task)